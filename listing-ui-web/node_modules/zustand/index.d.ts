export declare type State = Record<string | number | symbol, any>;
export declare type PartialState<T extends State> = Partial<T> | ((state: T) => Partial<T>);
export declare type StateCreator<T extends State> = (set: SetState<T>, get: GetState<T>, api: StoreApi<T>) => T;
export declare type StateSelector<T extends State, U> = (state: T) => U;
export declare type StateListener<T> = (state: T | null, error?: Error) => void;
export declare type SetState<T extends State> = (partial: PartialState<T>) => void;
export declare type GetState<T extends State> = () => T;
export interface Subscriber<T extends State, U> {
    currentSlice: U;
    equalityFn: EqualityChecker<U>;
    errored: boolean;
    listener: StateListener<U>;
    selector: StateSelector<T, U>;
    unsubscribe: () => void;
}
export declare type Subscribe<T extends State> = <U>(subscriber: Subscriber<T, U>) => () => void;
export declare type ApiSubscribe<T extends State> = <U>(listener: StateListener<U>, selector?: StateSelector<T, U>, equalityFn?: EqualityChecker<U>) => () => void;
export declare type EqualityChecker<T> = (state: T, newState: any) => boolean;
export declare type Destroy = () => void;
export interface UseStore<T extends State> {
    (): T;
    <U>(selector: StateSelector<T, U>, equalityFn?: EqualityChecker<U>): U;
}
export interface StoreApi<T extends State> {
    setState: SetState<T>;
    getState: GetState<T>;
    subscribe: ApiSubscribe<T>;
    destroy: Destroy;
}
export default function create<TState extends State>(createState: StateCreator<TState>): [UseStore<TState>, StoreApi<TState>];
export { create };
