'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var redux = function redux(reducer, initial) {
  return function (set, get, api) {
    api.dispatch = function (action) {
      set(function (state) {
        return reducer(state, action);
      });
      api.devtools && api.devtools.send(api.devtools.prefix + action.type, get());
      return action;
    };

    return _extends({
      dispatch: api.dispatch
    }, initial);
  };
};

var devtools = function devtools(fn, prefix) {
  return function (set, get, api) {
    var extension;

    try {
      extension = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;
    } catch (_unused) {}

    if (!extension) {
      if (process.env.NODE_ENV === 'development') {
        console.warn('Please install/enable Redux devtools extension');
      }

      api.devtools = null;
      return fn(set, get, api);
    }

    var namedSet = function namedSet(state, name) {
      set(state);

      if (name) {
        api.devtools.send(api.devtools.prefix + name, get());
      }
    };

    var initialState = fn(namedSet, get, api);

    if (!api.devtools) {
      api.devtools = extension.connect();
      api.devtools.prefix = prefix ? prefix + " > " : '';
      api.devtools.subscribe(function (message) {
        if (message.type === 'DISPATCH' && message.state) {
          var ignoreState = message.payload.type === 'JUMP_TO_ACTION' || message.payload.type === 'JUMP_TO_STATE';
          namedSet(JSON.parse(message.state), !initialState.dispatch && !ignoreState && 'setState');
        }
      });
      api.devtools.init(initialState);
    }

    return initialState;
  };
};

exports.devtools = devtools;
exports.redux = redux;
